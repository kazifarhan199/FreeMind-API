from django.conf import settings
from django.contrib.auth import get_user_model
from groups.models import GroupsMember
from notifications.models import Notification
from recommendations.models import SenderPostRecommendation, Ratings
from configuration.models import Configuration


User = get_user_model()

def postCreatedNotification(sender, instance, created, **kwargs):        
    if not created:
        # If not a new post
        return

    # Sending recommendation
    if not instance.is_recommendation:
        SenderPostRecommendation.objects.create(post=instance, tags="Autogenerated")

    # Sending notification
    group_members = GroupsMember.objects.filter(group=instance.group).exclude(user=instance.user)
    notifications = []
    for group_member in group_members:
        Notification.objects.create(object_id=instance.id, send_object=instance.id, type="post", user=group_member.user, title=str(instance.user.username)+" created a new post", body="", creator=instance.user)


def commentCreatedNotification(sender, instance, created, **kwargs):
    if not created:
        return

    # If a new post is created 
    group_members = GroupsMember.objects.filter(group=instance.post.group).exclude(user=instance.user)
    notifications = []
    for group_member in group_members:
        Notification.objects.create(object_id=instance.id, send_object=instance.post.id, type="comment", user=group_member.user, title=str(instance.user.username)+" commented on a post", body="", creator=instance.user)


def likeCreatedNotification(sender, instance, created, **kwargs):
    if not created:
        return

    # If a new post is created 
    group_members = GroupsMember.objects.filter(group=instance.post.group, user=instance.post.user).exclude(user=instance.user)
    notifications = []
    for group_member in group_members:
        Notification.objects.create(object_id=instance.id, send_object=instance.post.id, type="like", user=group_member.user, title=str(instance.user.username)+" liked a post", body="", creator=instance.user)


def feadbackCreates(sender, instance, created, **kwargs):    
    for obj in Ratings.objects.filter(user=instance.user, label=instance.comment.label, is_active=True):
        obj.is_active = False
        obj.save()
    Ratings.objects.create(label=instance.comment.label, user=instance.user, rating=instance.rating)
 